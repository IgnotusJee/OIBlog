<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法笔记-莫队二次离线</title>
    <url>/2020/09/15/CaptainMoTwiceOffine/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>莫队</tag>
        <tag>lxl</tag>
      </tags>
  </entry>
  <entry>
    <title>2-SAT</title>
    <url>/2020/09/08/2-SAT/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4782">洛谷4782</a><br>题意：给定m个约束条件，形式为$x_i,x_j$，表示$x_i$为真/假或$x_j$为真/假，给每个变量赋值使得所有条件得到满足。</p>
<h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>将问题转化为图论问题。设$x$表示变量$x$取<code>false</code>，¬$x$表示变量$x$取<code>true</code>。建立$2 \times n$个点，设$x_i$对应点$i$，¬$x_i$对应点$i+n$，则连有向边的意义为若前者成立则后者必成立。利用给出条件连边建图：</p>
<table>
<thead>
<tr>
<th align="center">约束条件</th>
<th align="center">连边</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$x_i$ or $x_j$</td>
<td align="center">$i+n \rightarrow j , j+n \rightarrow i$</td>
</tr>
<tr>
<td align="center">¬$x_i$ or $x_j$</td>
<td align="center">$i \rightarrow j , j+n \rightarrow i+n$</td>
</tr>
<tr>
<td align="center">$x_i$ or ¬$x_j$</td>
<td align="center">$i+n \rightarrow j+n , j \rightarrow i$</td>
</tr>
<tr>
<td align="center">¬$x_i$ or ¬$x_j$</td>
<td align="center">$i \rightarrow j+n , j \rightarrow i+n$</td>
</tr>
</tbody></table>
<p><strong>以一言以蔽之：对于每个约束，若其中一个变量不满足条件，则另一个必须满足。</strong><br>连边代码如下<del>位运算毒瘤</del>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AddEdge(u+n*(a^<span class="number">1</span>),v+n*(b&amp;<span class="number">1</span>));</span><br><span class="line">AddEdge(v+n*(b^<span class="number">1</span>),u+n*(a&amp;<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>接下来需要找出是否有可行解。可以发现，$i$是$j$的前驱当且仅当$i$点的取值条件成立时$j$点的取值条件成立（此处取值条件指点所指的变量为<code>true</code>或<code>false</code>），并且有$i$点的取值条件不成立时$j$点的取值条件不一定成立。显然，当$x_i$和¬$x_i$属于同一个强连通分量时，不存在可行解（存在互相矛盾）。因此，只要使用$tarjan$缩点，在每个强连通分量中看有没有$i$和$i+n$的点对即可实现。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> low[maxn&lt;&lt;<span class="number">1</span>],dfn[maxn&lt;&lt;<span class="number">1</span>],stamp,belong[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> s[maxn&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"><span class="keyword">char</span> ins[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++stamp;</span><br><span class="line">    s[++top]=u;ins[u]=<span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">for</span>(R i(head[u]);i;i=e[i].next) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[v]) low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u]) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">while</span>(s[top+<span class="number">1</span>]!=u) &#123;</span><br><span class="line">            belong[s[top]]=cnt;</span><br><span class="line">            ins[s[top--]]=<span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(belong[i]==belong[i+n])</span><br><span class="line">        <span class="keyword">return</span> write(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>),<span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>最后，要找出一组可行解。由上文可知，当$i$为$i+n$的前驱时，$x_i$取<code>true</code>；当$i+n$为$i$的前驱时，$x_i$取<code>false</code>（让前者不成立，后者成立）。在$tarjan$时，标号数组<code>belong</code>即为反向的拓扑序。因此，通过此数组即可得出前驱后继关系，即$i \text{为j的前驱} \Leftrightarrow belong[i]&gt;belong[j]$。<br>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">    write((<span class="keyword">int</span>)(belong[i]&gt;belong[i+n]),<span class="string">&quot; \n&quot;</span>[i==n]);</span><br></pre></td></tr></table></figure>

<p>最后放出完整代码,<del>不要说我快读毒瘤</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> quick &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tp template<span class="meta-string">&lt;typename Type&gt;</span></span></span><br><span class="line">    <span class="keyword">namespace</span> in &#123;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line">            <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">21</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            *s=getc();</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isspace</span>(*s)) &#123;*s=getc();<span class="keyword">if</span>(*s==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isspace</span>(*s)&amp;&amp;*s!=EOF) &#123;s++;*s=getc();&#125;</span><br><span class="line">            *s=<span class="string">&#x27;\0&#x27;</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;x)</span> </span>&#123;</span><br><span class="line">            x=<span class="number">0</span>;<span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);c=getc();<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);c=getc();&#125;</span><br><span class="line">            x*=(k?<span class="number">-1</span>:<span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;t,Args &amp;...args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            res+=read(t);res+=read(args...);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> in::read;</span><br><span class="line">    <span class="keyword">namespace</span> out &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];<span class="keyword">int</span> p1=<span class="number">-1</span>;<span class="keyword">const</span> <span class="keyword">int</span> p2=(<span class="number">1</span>&lt;&lt;<span class="number">21</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,p1+<span class="number">1</span>,<span class="built_in">stdout</span>);</span><br><span class="line">            p1=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1==p2) flush();</span><br><span class="line">            buf[++p1]=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">30</span>];<span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;putc(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>) putc(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) buf[++p]=x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">for</span>(;p!=<span class="number">-1</span>;p--) putc(buf[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;putc(c);&#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type t,Args ...args)</span> </span>&#123;</span><br><span class="line">            write(t);write(args...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> out::write;</span><br><span class="line">    <span class="keyword">using</span> out::flush;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">max</span><span class="params">(<span class="keyword">const</span> Type &amp;a,<span class="keyword">const</span> Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">min</span><span class="params">(<span class="keyword">const</span> Type &amp;a,<span class="keyword">const</span> Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Type &amp;a,Type &amp;b)</span> </span>&#123;</span><br><span class="line">        a^=b^=a^=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">abs</span><span class="params">(<span class="keyword">const</span> Type &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;=<span class="number">0</span>?a:-a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> tp</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> quick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">20</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,next;</span><br><span class="line">    Edge(<span class="keyword">int</span> v=<span class="number">0</span>,<span class="keyword">int</span> next=<span class="number">0</span>) :v(v),next(next) &#123;&#125;</span><br><span class="line">&#125;e[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>],k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">    e[++k]=Edge(v,head[u]);</span><br><span class="line">    head[u]=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> low[maxn&lt;&lt;<span class="number">1</span>],dfn[maxn&lt;&lt;<span class="number">1</span>],stamp,belong[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="keyword">int</span> s[maxn&lt;&lt;<span class="number">1</span>],top;</span><br><span class="line"><span class="keyword">char</span> ins[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++stamp;</span><br><span class="line">    s[++top]=u;ins[u]=<span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">for</span>(R i(head[u]);i;i=e[i].next) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> &amp;v=e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v]) &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[v]) low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u]) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">while</span>(s[top+<span class="number">1</span>]!=u) &#123;</span><br><span class="line">            belong[s[top]]=cnt;</span><br><span class="line">            ins[s[top--]]=<span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;sat.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    read(n,m);</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=m;i++) &#123;</span><br><span class="line">        R u,a,v,b;</span><br><span class="line">        read(u,a,v,b);</span><br><span class="line">        AddEdge(u+n*(a^<span class="number">1</span>),v+n*(b&amp;<span class="number">1</span>));</span><br><span class="line">        AddEdge(v+n*(b^<span class="number">1</span>),u+n*(a&amp;<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=(n&lt;&lt;<span class="number">1</span>);i++) <span class="keyword">if</span>(!dfn[i]) tarjan(i);</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(belong[i]==belong[i+n])</span><br><span class="line">            <span class="keyword">return</span> write(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>),flush(),<span class="number">0</span>;</span><br><span class="line">    write(<span class="string">&quot;POSSIBLE\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">        write((<span class="keyword">int</span>)(belong[i]&gt;belong[i+n]),<span class="string">&quot; \n&quot;</span>[i==n]);</span><br><span class="line">    flush();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>QT题单数学练习</title>
    <url>/2020/09/08/MathPractice/</url>
    <content><![CDATA[<h1 id="GCD等于XOR-GCD-XOR"><a href="#GCD等于XOR-GCD-XOR" class="headerlink" title="GCD等于XOR GCD XOR"></a><a href="https://www.luogu.com.cn/problem/UVA12716">GCD等于XOR GCD XOR</a></h1><p>求<br>$$<br>\sum_{i=1}^n\sum_{j=i}^n\left[gcd(i,j)=i \operatorname{xor} j\right]<br>$$<br>设<br>$$<br>\operatorname{gcd}(a,b)=a \operatorname{xor}b=c\quad (a\ge b)\\<br>\Rightarrow \operatorname{gcd}(\frac{a}{c},\frac{b}{c})=1,\<br>$$</p>
<p>异或为不借位的减法，所以两数差一定不大于两数异或</p>
<p>$$<br>a-b\le c\quad,\\<br>\Rightarrow \frac{a}{c}-\frac{b}{c}\le 1<br>$$</p>
<p>综上，$a-b=a\operatorname{xor}b$。先枚举$a$的约数，再枚举$a$。预处理前缀和即可。</p>
<h1 id="Same-GCDs"><a href="#Same-GCDs" class="headerlink" title="Same GCDs"></a><a href="https://www.luogu.com.cn/problem/CF1295D">Same GCDs</a></h1><p>设$d=gcd(a,m)$，则<br>$$<br>gcd\left(\frac{a}{d},\frac{m}{d}\right)=gcd\left(\frac{a+x}{d},\frac{m}{d}\right)=1<br>$$<br>得到<br>$$<br>\frac{a+x}{d} \perp \frac{m}{d} \Leftrightarrow \frac{x}{d} \perp \frac{m}{d}<br>$$<br>所以$a$仅仅是将$[0,m-1]$的数进行了一段平移，答案为$\varphi\left(\frac{m}{d}\right)$</p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>数学，练习</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷3684 [CERC2016]机棚障碍 Hangar Hurdles 题解</title>
    <url>/2020/09/13/SolutionOfHangarHurdles/</url>
    <content><![CDATA[<p>并查集写成<code>Merge(e[i].v,e[i].v)</code>调了三天奥里给都给我调出来了。<del>不过这都70分可见数据有多水</del></p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个$n\times n$的网格图，其中部分格点有障碍物使得箱子不能置于其上。规定箱子是一个奇数边长的正方形，其坐标为其中心格点的坐标。箱子只能上下左右移动，每次询问从一个格点能移动到另一个格点的最大箱子。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>此题看似简单，实则恶心的一匹。</p>
<ul>
<li>我们先考虑将问题转化。如果求出每个格点能放置的最大箱子，设为格点权，那么每次询问就变成了求出两点路径上最小点权最大的路径。每次bfs，复杂度无法承受。</li>
<li>接着发现联通的点权相同的格点可以缩成一个点，因为在这个联通块内移动是不会改变经过的最小点权的。</li>
<li>于是在上下左右四个方向移动转化为了在相邻的联通块内移动。我们可以在相邻的联通块内连边，将边权设为两点点权的最小值，于是只要求出最大瓶颈路就可以了。</li>
<li>任意两点间的最大瓶颈路可以用如下算法求：将边降序排序，依次加入图中，两点第一次联通时其路径即为最大瓶颈路。正确性显然。</li>
<li>发现这就是Kruskal求最大生成树的过程，于是只要在生成树上查询路径最小值就可以了。</li>
</ul>
<p>经过以上转化，此题解决（指口头）。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现才是这道题的重头戏。</p>
<h2 id="part1-求出MaxSize"><a href="#part1-求出MaxSize" class="headerlink" title="part1 求出MaxSize"></a>part1 求出MaxSize</h2><ul>
<li><p>首先设图中障碍为1，其余为0，对原图进行前缀和，以快速求出目标矩阵中有没有障碍物。</p>
</li>
<li><p>对每个格点进行二分，得到每个格点能放置的最大箱子设为MaxSize。其中因为边长只能为奇数，二分时是对中心点到边界的距离进行二分。</p>
</li>
<li><p>复杂度$O(n^2logn)$</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一部分：预处理出每个点的最大矩形</span></span><br><span class="line"><span class="keyword">namespace</span> DealMatrix &#123;</span><br><span class="line">    <span class="keyword">int</span> sum[maxn][maxn];<span class="comment">//前缀和，障碍为1</span></span><br><span class="line">    <span class="keyword">int</span> maxsize[maxn][maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;i,<span class="keyword">const</span> <span class="keyword">int</span> &amp;j,<span class="keyword">const</span> <span class="keyword">int</span> &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i-s&lt;<span class="number">1</span>||j-s&lt;<span class="number">1</span>||i+s&gt;n||j+s&gt;n) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//大了</span></span><br><span class="line">        <span class="keyword">if</span>(sum[i+s][j+s]-sum[i-s<span class="number">-1</span>][j+s]-sum[i+s][j-s<span class="number">-1</span>]+sum[i-s<span class="number">-1</span>][j-s<span class="number">-1</span>]) <span class="keyword">return</span> <span class="number">0x0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getsize</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;i,<span class="keyword">const</span> <span class="keyword">int</span> &amp;j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=n/<span class="number">2</span>,mid,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">            mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!~check(i,j,mid)) ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;j++)</span><br><span class="line">                sum[i][j]=sum[i][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    maxsize[i][j]=getsize(i,j);</span><br><span class="line">                <span class="keyword">else</span> maxsize[i][j]=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="part2-缩点并连边"><a href="#part2-缩点并连边" class="headerlink" title="part2 缩点并连边"></a>part2 缩点并连边</h2></li>
<li><p>将MaxSize相同的点缩在一起，可以使用bfs或者并查集。我这里使用的是bfs。</p>
</li>
<li><p>连边时设$u&lt;v$，先加入要求生成树的图里。注意要判重，我这里使用的是<code>unordered_map</code>。</p>
</li>
<li><p>复杂度$O(n^2)$，将<code>unordered_map</code>的每次操作当成常数级别。</p>
</li>
</ul>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BuildGraph &#123;</span><br><span class="line">    <span class="keyword">int</span> belong[maxn][maxn],cnt;<span class="comment">//联通块编号</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> DealMatrix::maxsize;</span><br><span class="line">    <span class="keyword">char</span> vis[maxn][maxn];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Search</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;i,<span class="keyword">const</span> <span class="keyword">int</span> &amp;j,<span class="keyword">const</span> <span class="keyword">int</span> &amp;col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">queue</span>&lt; <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">        vis[i][j]=<span class="number">0xff</span>;belong[i][j]=col;</span><br><span class="line">        q.push(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(i,j));</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front().first;</span><br><span class="line">            <span class="keyword">int</span> y=q.front().second;</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k(<span class="number">0</span>);k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line">                <span class="keyword">int</span> nx=x+dx[k],ny=y+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(nx&lt;<span class="number">1</span>||ny&lt;<span class="number">1</span>||nx&gt;n||ny&gt;n||maxsize[nx][ny]!=maxsize[i][j]||!~vis[nx][ny])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                vis[nx][ny]=<span class="number">0xff</span>;</span><br><span class="line">                belong[nx][ny]=col;</span><br><span class="line">                q.push(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(nx,ny));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt; <span class="keyword">int</span>,<span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; &gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(~vis[i][j]&amp;&amp;~maxsize[i][j])</span><br><span class="line">                    Search(i,j,++cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;=n;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!~maxsize[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k(<span class="number">0</span>);k&lt;<span class="number">4</span>;k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x=i+dx[k],y=j+dy[k];</span><br><span class="line">                    <span class="keyword">int</span> p=belong[i][j],q=belong[x][y];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span>||y&lt;<span class="number">1</span>||x&gt;n||y&gt;n||!q||p==q) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(p&gt;q) swap(p,q);</span><br><span class="line">                    <span class="keyword">if</span>(!~s[p][q]) <span class="keyword">continue</span>;</span><br><span class="line">                    s[p][q]=<span class="number">0xff</span>;</span><br><span class="line">                    Graph_1::e[++Graph_1::m]=Graph_1::Edge(p,q,min(maxsize[i][j],maxsize[x][y]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        N=cnt;</span><br><span class="line">        Graph_1::Kruscal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="part3-求出最大生成树"><a href="#part3-求出最大生成树" class="headerlink" title="part3 求出最大生成树"></a>part3 求出最大生成树</h2><p>这个没什么说的。并查集我使用的是路径压缩+按秩合并版本，复杂度最优。复杂度$O(m\alpha(n^2))$，其中$m$为边数。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Graph_1 &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        Edge(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;w)</span><br><span class="line">            :u(u),v(v),w(w) &#123;&#125;</span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    &#125;e[maxm&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> m;<span class="keyword">char</span> InTree[maxm&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Compare</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> Edge &amp;a,<span class="keyword">const</span> Edge &amp;b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;cmp;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">UnoinFindSet</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> fa[maxm],rank[maxm];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=N;i++) fa[i]=i,rank[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (x == fa[x]) ? x : (fa[x] = Find( fa[x] ));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">            int x(Find(u)),y(Find(v));</span><br><span class="line">            <span class="keyword">if</span>(x!=y) &#123;</span><br><span class="line">                <span class="keyword">if</span>(rank[x]&lt;rank[y]) fa[x]=y,rank[y]=max(rank[y],rank[x]+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> fa[y]=x,rank[x]=max(rank[x],rank[y]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Same</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Find(u)==Find(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;U;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Kruscal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmp);</span><br><span class="line">        U.Init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(U.Same(e[i].u,e[i].v)) <span class="keyword">continue</span>;</span><br><span class="line">            U.Merge(e[i].u,e[i].v);</span><br><span class="line">            InTree[i]=<span class="number">0xff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="part4-树上快速查询"><a href="#part4-树上快速查询" class="headerlink" title="part4 树上快速查询"></a>part4 树上快速查询</h2><ul>
<li>这里方法很多，可以倍增，树剖<del>还有LCT</del>。这里采用的是树剖+ST表。复杂度预处理$n^2logn$，每次查询$logn$。</li>
<li>注意求出的生成树可能是森林。</li>
<li>另外，因为前面把点权转化为边权，这里又把边权转化为点权处理，所以树剖询问时不能加上lca的贡献。</li>
</ul>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第三部分树剖最小值，在最小生成树上查询瓶颈路。注意，可能是一个森林</span></span><br><span class="line"><span class="keyword">namespace</span> Tree &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> v,next,w;</span><br><span class="line">        Edge(<span class="keyword">const</span> <span class="keyword">int</span> &amp;v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;next,<span class="keyword">const</span> <span class="keyword">int</span> &amp;w)</span><br><span class="line">            :v(v),next(next),w(w) &#123;&#125;</span><br><span class="line">        Edge() &#123;&#125;</span><br><span class="line">    &#125;e[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[maxm],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;w)</span> </span>&#123;</span><br><span class="line">        e[++cnt]=Edge(v,head[u],w);</span><br><span class="line">        head[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> val[maxm];<span class="comment">//边权转化为点权</span></span><br><span class="line">    <span class="keyword">namespace</span> STTable &#123;</span><br><span class="line">        <span class="keyword">int</span> f[maxm][<span class="number">21</span>],Log[maxm];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">0</span>),w(<span class="number">1</span>);w&lt;=N;i++,w&lt;&lt;=<span class="number">1</span>) Log[w]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=N;i++) <span class="keyword">if</span>(!Log[i]) Log[i]=Log[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=N;i++)</span><br><span class="line">                f[i][<span class="number">0</span>]=val[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j(<span class="number">1</span>);j&lt;<span class="number">21</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=N;i++)</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">1</span>+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=N)</span><br><span class="line">                        f[i][j]=min(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">QueryMin</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;l,<span class="keyword">const</span> <span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> inf;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">o</span><span class="params">(Log[r-l+<span class="number">1</span>])</span></span>;</span><br><span class="line">            <span class="keyword">return</span> min(f[l][o],f[r-(<span class="number">1</span>&lt;&lt;o)+<span class="number">1</span>][o]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size[maxm],fa[maxm],son[maxm],w[maxm],depth[maxm],belong[maxm],Cnt_Tree;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u)</span> </span>&#123;</span><br><span class="line">        belong[u]=Cnt_Tree;</span><br><span class="line">        size[u]=<span class="number">1</span>;depth[u]=depth[fa[u]]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(head[u]);i;i=e[i].next) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> &amp;v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(v==fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">            fa[v]=u;</span><br><span class="line">            dfs1(v);</span><br><span class="line">            size[u]+=size[v];</span><br><span class="line">            <span class="keyword">if</span>(size[v]&gt;size[son[u]]) son[u]=v,w[u]=e[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> top[maxm],dfn[maxm],stamp;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;anc)</span> </span>&#123;</span><br><span class="line">        dfn[u]=++stamp;</span><br><span class="line">        top[u]=anc;</span><br><span class="line">        <span class="keyword">if</span>(son[u]) dfs2(son[u],anc),val[dfn[son[u]]]=w[u];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(head[u]);i;i=e[i].next) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> &amp;v=e[i].v;</span><br><span class="line">            <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs2(v,v);val[dfn[v]]=e[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GetMin</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=inf;</span><br><span class="line">        <span class="keyword">while</span>(top[u]!=top[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[top[u]]&lt;depth[top[v]]) swap(u,v);</span><br><span class="line">            ans=min(ans,STTable::QueryMin(dfn[top[u]],dfn[u]));</span><br><span class="line">            u=fa[top[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(depth[u]&gt;depth[v]) swap(u,v);</span><br><span class="line">        ans=min(ans,STTable::QueryMin(dfn[u]+<span class="number">1</span>,dfn[v]));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=Graph_1::m;i++)</span><br><span class="line">            <span class="keyword">if</span>(!~Graph_1::InTree[i]) &#123;</span><br><span class="line">                AddEdge(Graph_1::e[i].u,Graph_1::e[i].v,Graph_1::e[i].w);</span><br><span class="line">                AddEdge(Graph_1::e[i].v,Graph_1::e[i].u,Graph_1::e[i].w);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i(<span class="number">1</span>);i&lt;=N;i++)</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) &#123;</span><br><span class="line">                Cnt_Tree++;</span><br><span class="line">                dfs1(i);</span><br><span class="line">                dfs2(i,i);</span><br><span class="line">            &#125;</span><br><span class="line">        STTable::Init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="part5-处理询问"><a href="#part5-处理询问" class="headerlink" title="part5 处理询问"></a>part5 处理询问</h2><p>注意亿点细节。例如，不在一棵树上以及所询问的点就是障碍时，返回无解。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x1,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y1,<span class="keyword">const</span> <span class="keyword">int</span> &amp;x2,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[x1][y1]==<span class="string">&#x27;#&#x27;</span>||<span class="built_in">map</span>[x2][y2]==<span class="string">&#x27;#&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u=BuildGraph::belong[x1][y1],v=BuildGraph::belong[x2][y2];</span><br><span class="line">    <span class="keyword">if</span>(u==v) <span class="keyword">return</span> DealMatrix::maxsize[x1][y1];</span><br><span class="line">    <span class="keyword">if</span>(Tree::belong[u]!=Tree::belong[v]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=Tree::GetMin(u,v);</span><br><span class="line">    <span class="keyword">if</span>(ans==inf) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>总复杂度$O((n^2+q)logn+m\alpha(n^2))$。可以将$m$看作是$n^2$级别，但实际远远要小。</p>
<p>至此，此题终于做完了。我的代码共354行，算得上是我打过的最长的代码了。<del>还不是因为加了个七十多行的快速读写</del></p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷1587 [NOI2016]循环之美 题解</title>
    <url>/2020/09/06/cyclebuity/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1587">题面</a></p>
<h1 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h1><p>给定$n,m,k$,求对于$1\le x \le n,1\le y\le m$，$\frac{x}{y}$满足数值上互不相等且在$k$进制下为纯循环小数的个数。</p>
<p>从小数部分第一位开始的循环小数，称为纯循环小数。特别地，整数为纯循环小数。</p>
<h1 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h1><p>要满足数值上互不相等，只需统计最简分数，即$x\perp y$即可。</p>
<p>接下来要判定纯循环小数。</p>
<h3 id="引理：-frac-x-y-x-perp-y-在-k-进制下是循环小数当且仅当-y-perp-k"><a href="#引理：-frac-x-y-x-perp-y-在-k-进制下是循环小数当且仅当-y-perp-k" class="headerlink" title="引理：$\frac{x}{y},(x\perp y)$在$k$进制下是循环小数当且仅当$y\perp k$"></a>引理：$\frac{x}{y},(x\perp y)$在$k$进制下是循环小数当且仅当$y\perp k$</h3><p>证明：</p>
<p>设$\frac{x}{y}$为纯循环最简小数，在$k$进制下其循环节长为$l$。</p>
<p>由纯循环小数定义可知$\frac{x}{y}k^l-\frac{x}{y}=\frac{x}{y}\left(k^l-1\right)\in Z$（$Z$为整数集）。</p>
<p>又$x\perp y$，则$y|\left(k^l-1\right)$。</p>
<p>接下来反证。假设$y\not\perp k$。因为有$k^l \not\perp \left(k^l-1\right)$，即$k\not\perp \left(k^l-1\right)$，可推出$y\not \perp \left(k^l-1\right)$，与上文结论矛盾。</p>
<p>证毕。</p>
<h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><p>于是，问题转化为了求$\sum_{x=1}^n\sum_{y=1}^m\left[x\perp y\right]\left[y\perp k\right]$。</p>
<p>反演并改变枚举顺序可得<br>$$<br>\sum_{x=1}^n\sum_{y=1}^m\left[x\perp y\right]\left[y\perp k\right]\\<br>=\sum_{x=1}^n\sum_{y=1}^m\left[y\perp k\right]\sum_{d|x,d|y}\mu(d)\\<br>=\sum_{d=1}^{min(n,m)}\mu(d)\left[d\perp k\right]\lfloor\frac{n}{d}\rfloor\sum_{y=1}^{\lfloor\frac{m}{d}\rfloor}\left[y\perp k\right]\\<br>$$</p>
<p>设$f\left(n,k\right)=\sum_{i=1}^n\left[i\perp k\right],g\left(n,k\right)=\sum_{i-1}^n\mu(i)\left[i\perp k\right]$，则$\sum_{x=1}^n\sum_{y=1}^m\left[x\perp y\right]\left[y\perp k\right]=\sum_{d=1}^{min(n,m)}\mu(d)\left[d\perp k\right]\lfloor\frac{n}{d}\rfloor f\left(\lfloor\frac{m}{d}\rfloor,k\right)$</p>
<p>因为平方因子与其他数与它是否互质无关,不妨设$k$无完全平方因子（若有将其除掉）。设$p$为$k$的一个质因子，则对于$f$有<br>$$<br>f(n,1)=\sum_{i=1}^n1=n,\\<br>f(n,k)= \sum_{i=1}^n\left[i\perp k\right]= \sum_{i=1}^n\left[i\perp \frac{k}{p}\right]-\sum_{i=1}^n\left[i\perp \frac{k}{p}\right]\left[p|i\right]\\<br>=f\left(i,\frac{k}{p}\right)-\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\left[ip\perp \frac{k}{p}\right]=f\left(i,\frac{k}{p}\right)-\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\left[i\perp \frac{k}{p}\right]\\<br>=f\left(i,\frac{k}{p}\right)-f\left(\lfloor\frac{n}{p}\rfloor,\frac{k}{p}\right),\qquad \left(p|k,p\in P\right)<br>$$</p>
<p>对于$g$有：</p>
<p>$$<br>g\left(n,1\right)=\sum_{i=1}^n\mu(i),\\<br>g\left(n,k\right)=\sum_{i=1}^n\mu(i)\left[i\perp k\right]=\sum_{i=1}^n\mu(i)\left[i\perp \frac{k}{p}\right]-\sum_{i=1}^n\mu(i)\left[i\perp \frac{k}{p}\right]\left[p|i\right]\\<br>=g\left(n,\frac{k}{p}\right)-\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\mu(ip)\left[ip\perp \frac{k}{p}\right]\\<br>=g\left(n,\frac{k}{p}\right)-\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\mu(i)\mu(p)\left[i\perp p\right]\left[i\perp \frac{k}{p}\right]\\<br>=g\left(n,\frac{k}{p}\right)-\mu(p)\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\mu(i)\left[i\perp k\right]\\<br>=g\left(n,\frac{k}{p}\right)+g\left(\lfloor\frac{n}{p}\rfloor,k\right)\qquad \left(p|k,p\in P\right)\\<br>\left(\quad \mu(p)=-1 \quad \right)<br>$$</p>
<p>以上$P$为质数集，利用了莫比乌斯函数的性质$\mu(ab)=\mu(a)\mu(b)\left[a\perp b\right]$</p>
<p>于是，对于$k=1$的情况，$f$可$O(1)$求解，$g$使用杜教筛即可。</p>
<p>对于$k&gt;1$的情况，递归求解即可。</p>
<p>最后数论分块即可求解。递归部分时间复杂度$O\left(\sqrt n\frac{logk}{loglogk}\right)$，杜教筛部分时间复杂度$O(n^{\frac{2}{3}})$。</p>
<p>思路来自于11Dimensions。</p>
<h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R register int</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> quick &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tp template<span class="meta-string">&lt;typename Type&gt;</span></span></span><br><span class="line">    <span class="keyword">namespace</span> in &#123;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line">            <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">21</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            *s=getc();</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isspace</span>(*s)) &#123;*s=getc();<span class="keyword">if</span>(*s==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isspace</span>(*s)&amp;&amp;*s!=EOF) &#123;s++;*s=getc();&#125;</span><br><span class="line">            *s=<span class="string">&#x27;\0&#x27;</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;x)</span> </span>&#123;</span><br><span class="line">            x=<span class="number">0</span>;<span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);c=getc();<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);c=getc();&#125;</span><br><span class="line">            x*=(k?<span class="number">-1</span>:<span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;t,Args &amp;...args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            res+=read(t);res+=read(args...);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> in::read;</span><br><span class="line">    <span class="keyword">namespace</span> out &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];<span class="keyword">int</span> p1=<span class="number">-1</span>;<span class="keyword">const</span> <span class="keyword">int</span> p2=(<span class="number">1</span>&lt;&lt;<span class="number">21</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,p1+<span class="number">1</span>,<span class="built_in">stdout</span>);</span><br><span class="line">            p1=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1==p2) flush();</span><br><span class="line">            buf[++p1]=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">30</span>];<span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;putc(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>) putc(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) buf[++p]=x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">for</span>(;p!=<span class="number">-1</span>;p--) putc(buf[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;putc(c);&#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type t,Args ...args)</span> </span>&#123;</span><br><span class="line">            write(t);write(args...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> out::write;</span><br><span class="line">    <span class="keyword">using</span> out::flush;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">max</span><span class="params">(<span class="keyword">const</span> Type &amp;a,<span class="keyword">const</span> Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">min</span><span class="params">(<span class="keyword">const</span> Type &amp;a,<span class="keyword">const</span> Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Type &amp;a,Type &amp;b)</span> </span>&#123;</span><br><span class="line">        a^=b^=a^=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">abs</span><span class="params">(<span class="keyword">const</span> Type &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;=<span class="number">0</span>?a:-a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> tp</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> quick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">20</span>,limit=<span class="number">1e6</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mu[maxn];<span class="comment">//g的第一维</span></span><br><span class="line"><span class="keyword">int</span> prime[maxn],cnt,pk[maxn],tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> &amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> not_prime[maxn];</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">2</span>);i&lt;=limit;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(~not_prime[i]) prime[cnt++]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(R j(<span class="number">0</span>);j&lt;cnt&amp;&amp;prime[j]&lt;=limit/i;j++) &#123;</span><br><span class="line">            not_prime[i*prime[j]]=<span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            mu[i*prime[j]]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">1</span>);i&lt;=limit;i++) mu[i]+=mu[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">0</span>);i&lt;cnt&amp;&amp;prime[i]&lt;=k;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(k%(prime[i]*prime[i])==<span class="number">0</span>) k/=prime[i];</span><br><span class="line">        <span class="keyword">if</span>(k%prime[i]==<span class="number">0</span>) pk[tot++]=prime[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f1(i) i</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g1(i) mu[i]</span></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,ll&gt; G1;</span><br><span class="line"><span class="function">ll <span class="title">GetG1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=limit) <span class="keyword">return</span> g1(n);</span><br><span class="line">    <span class="keyword">if</span>(G1[n]) <span class="keyword">return</span> G1[n];</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">2</span>),j;i&lt;=n;i=j+<span class="number">1</span>) &#123;</span><br><span class="line">        j=n/(n/i);</span><br><span class="line">        ans-=(ll)(j-i+<span class="number">1</span>)*GetG1(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> G1[n]=ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span> &lt;<span class="keyword">int</span>,<span class="built_in">unordered_map</span> &lt;<span class="keyword">int</span>,ll&gt; &gt; F,G;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;n,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k,<span class="keyword">const</span> <span class="keyword">int</span> &amp;now=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> ll(f1(n));</span><br><span class="line">    <span class="keyword">if</span>(F[n][k]) <span class="keyword">return</span> F[n][k];</span><br><span class="line">    <span class="keyword">return</span> F[n][k]=f(n,k/pk[now],now+<span class="number">1</span>)-f(n/pk[now],k/pk[now],now+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">g</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;n,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k,<span class="keyword">const</span> <span class="keyword">int</span> &amp;now=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> GetG1(n);</span><br><span class="line">    <span class="keyword">if</span>(G[n][k]) <span class="keyword">return</span> G[n][k];</span><br><span class="line">    <span class="keyword">return</span> G[n][k]=g(n,k/pk[now],now+<span class="number">1</span>)+g(n/pk[now],k,now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">&quot;bea.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    read(n,m,k);</span><br><span class="line">    Init(k);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">1</span>),j;i&lt;=n&amp;&amp;i&lt;=m;i=j+<span class="number">1</span>) &#123;</span><br><span class="line">        j=min(n/(n/i),m/(m/i));</span><br><span class="line">        ans+=(ll)(g(j,k)-g(i<span class="number">-1</span>,k))*(n/i)*f(m/i,k);</span><br><span class="line">    &#125;</span><br><span class="line">    write(ans,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    flush();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><del>注意n和m不要交换，我就是因为这个调了一上午</del></p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>数学</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>数学杂项</title>
    <url>/2020/09/08/math1/</url>
    <content><![CDATA[<h2 id="一-组合数公式"><a href="#一-组合数公式" class="headerlink" title="一. 组合数公式"></a>一. 组合数公式</h2><p>$$ C^n_m = \frac{m!}{n!(m-n)!} , n \geq m $$<br>那么可以在$O(n^2)$的复杂度上递推出组合数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span> C);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">        C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由组合数定义易证得<br>$$ C^n_m = \frac{m-n+1}{n} C^{n-1}_m $$<br>于是也可以在$O(n)$的复杂度上递推出组合数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">C[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) C[i]=C[i<span class="number">-1</span>]*(n-i+<span class="number">1</span>)/i;<span class="comment">//先乘后除，避免小数，但要考虑溢出的情况</span></span><br></pre></td></tr></table></figure>
<p>注意，第二种方法因为有除法，所以不能取模。在需要给组合数取模时，应使用第一种方法。</p>
<h2 id="二-二项式定理"><a href="#二-二项式定理" class="headerlink" title="二. 二项式定理"></a>二. 二项式定理</h2><p> 对于一个多项式$(a+b)^n$，其展开后的系数构成杨辉三角。即<br> $$ (a+b)^n = \sum_{r=0}^n C^r_n a^{n-r} b^r $$<br> 所以，可以通过递推组合数来求解杨辉三角即多项式系数。<br> 例题：<a href="https://www.luogu.com.cn/problem/P1313">洛谷1313 计算系数</a> <a href="https://www.luogu.com.cn/problem/P2822">洛谷2822 组合数问题</a><br>难题：<a href="https://www.luogu.com.cn/problem/UVA1635">UVa1635 Irrelevant Elements</a></p>
<h2 id="三-卢卡斯定理"><a href="#三-卢卡斯定理" class="headerlink" title="三. 卢卡斯定理"></a>三. 卢卡斯定理</h2><p>数论中Lucas定理描述为：<br>设p为素数,$a,b\in N^*$,并且<br>$$ a=a_kp^k+a_{k-1}p^{k-1}+ \cdots +a_1p+a_0,\ $$<br>$$ b=b_kp^k+b_{k-1}p^{k-1}+ \cdots +b_1p+b_0,\ $$<br>这里$0\leq a_i,b_i \leq p-1$都是整数,$i=0,1,2,…,k.$.那么：<br>$ C^b_a \equiv C^{b_k}<em>{a_k} \cdot C^{b_{k-1}}</em>{a_{k-1}} \cdot \cdots \cdot C^{b_0}_{a_0} (mod : p) $<br>证明略。</p>
<h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>求$C^m_n mod : k$,其中$n,m\leq 10^{10}$,k是素数且较小.</p>
<h1 id="四-容斥原理"><a href="#四-容斥原理" class="headerlink" title="四. 容斥原理"></a>四. 容斥原理</h1><p>  在计数时，必须注意无一重复，无一遗漏。为了使重叠部分不被重复计算，人们研究出一种新的计数方法，这种方法的基本思想是：<strong>先不考虑重叠的情况，把包含于某内容中的所有对象的数目先计算出来，然后再把计数时重复计算的数目排斥出去，使得计算的结果既无遗漏又无重复，这种计数的方法称为容斥原理。</strong> 即：</p>
<p>$$<br>\left| A_1 \cup A_2 \cup \cdots \cup A_m \right| = \sum_{i=1}^m \left| a_i \right| - \sum_{j=i+1}^m \left| A_i \cup A_j \right| + \sum_{k=j+1}^m \left| A_i \cup A_j \cup A_k \right| - \cdots + \left( -1^{m-1} \right)\left| A_1 \cup A_2 \cup A_3 \cup \cdots \cup A_m \right|<br>$$</p>
<h1 id="五-欧拉函数"><a href="#五-欧拉函数" class="headerlink" title="五. 欧拉函数"></a>五. 欧拉函数</h1><p> 定义：小于或等于n的正整数中与n互质的数的数目, 记作$\varphi \left(n\right)$.定义式 : </p>
<p>$$<br>\varphi \left(n\right) = \sum_{S \in {p_1p_2p_3 \cdots p_n}} (-1)^{|S|} \frac{n}{\prod_{p_i \in S} p_i}<br>$$</p>
<p>可乘性：$\varphi \left(p \cdot q\right)=\varphi \left(p\right) \cdot \varphi \left(q\right)$, 当且仅当$p,q$互质</p>
<p>计算式：$\varphi \left(n\right) = n \cdot \prod_{p|n} (1-\frac{1}{p})$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">euler_varphi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=n,m=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(R i=<span class="number">2</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i) <span class="keyword">continue</span>;</span><br><span class="line">        ans=ans/i*(i<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span>(n%i==<span class="number">0</span>) n/=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>) ans=ans/n*(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线性递推：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_varphi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    varphi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(R i(<span class="number">2</span>);i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(varphi[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(R j(i);j&lt;=n;j+=i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!varphi[j]) varphi[j]=j;</span><br><span class="line">            varphi[j]=varphi[j]/i*(i<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六-欧拉定理"><a href="#六-欧拉定理" class="headerlink" title="六. 欧拉定理"></a>六. 欧拉定理</h1><p>$$<br>a^c \equiv \begin{cases}<br>a^{c \bmod \varphi \left(m\right) }  &amp; gcd\left(a,m\right)=1 \\<br>a^c &amp; gcd\left(a,m\right)\neq 1 \pmod m , c&lt;\varphi \left(m\right)  \\<br>a^{\left(c \bmod \varphi \left(m\right)\right)+\varphi \left(m\right)} &amp; gcd\left(a,m\right)\neq 1 \pmod m , c \geq \varphi \left(m\right)<br>\end{cases}<br>\pmod m<br>$$</p>
<p>模版：<a href="https://www.luogu.com.cn/problem/P5091">洛谷P5091</a></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>做题记录（三）</title>
    <url>/2020/09/08/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="POI2011-ROT-Tree-Rotations"><a href="#POI2011-ROT-Tree-Rotations" class="headerlink" title="[POI2011]ROT-Tree Rotations"></a>[<a href="https://www.luogu.com.cn/problem/P3521">POI2011]ROT-Tree Rotations</a></h1><p>树上线段树合并。考虑在每个叶节点建一颗权值线段树，然后向上合并。</p>
<p>因为交换子树只会影响到跨越左右子树的逆序对数，所以考虑决策是否交换。</p>
<p>在合并左右子树的权值线段树时，设左子树当前节点为$a$，右子树的当前节点为$b$，$lc,rc$分别为权值线段树中的左右儿子。则不交换在当前值域产生的逆序对数为$sum[rc[a]]*sum[lc[b]]$，交换在当前值域产生的逆序对数为$sum[lc[a]]*sum[rc[b]]$。取最大值统计即可。</p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>做题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>卡常技巧-快速IO</title>
    <url>/2020/09/10/%E5%8D%A1%E5%B8%B8%E6%8A%80%E5%B7%A7-%E5%BF%AB%E9%80%9FIO/</url>
    <content><![CDATA[<p>在$OI$中，卡常是一门奇怪又必备的技巧，在某些毒瘤题<del>如Ynoi</del>中需要用到许多卡常技巧才能卡入时限。这里给出我自己的快速$IO$卡常代码。</p>
<h1 id="一、快速读入"><a href="#一、快速读入" class="headerlink" title="一、快速读入"></a>一、快速读入</h1><h2 id="1、带符号整形"><a href="#1、带符号整形" class="headerlink" title="1、带符号整形"></a>1、带符号整形</h2><p>最简单基础的快读。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);c=getc();<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);c=getc();&#125;</span><br><span class="line">    x*=(k?<span class="number">-1</span>:<span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或换个写法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getc()) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getc()) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);&#125;</span><br><span class="line">    x*=(k?<span class="number">-1</span>:<span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>getc</code>为读入一个字符的函数，函数返回值为是否读到数。在对$x$的位运算处，不排除有更优秀的写法。</p>
<h2 id="2、单个字符"><a href="#2、单个字符" class="headerlink" title="2、单个字符"></a>2、单个字符</h2><p>如果只是要求读入字符，可以直接</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c=getc())!=EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果对读入的字符有要求，如必须是字母或数字等，可以使用<code>cctype</code>库中函数来判断读入。以读入非空字符为例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(c=getc(),<span class="built_in">isspace</span>(c));</span><br><span class="line">    <span class="keyword">return</span> c!=EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>EOF</code>标识符在<code>isspace</code>中返回真。</p>
<h2 id="3、字符串"><a href="#3、字符串" class="headerlink" title="3、字符串"></a>3、字符串</h2><p>采用和<code>scanf</code>一样的读入方式，即在读入空字符时停止。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    *s=getc();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isspace</span>(*s)) &#123;*s=getc();<span class="keyword">if</span>(*s==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isspace</span>(*s)&amp;&amp;*s!=EOF) &#123;s++;*s=getc();&#125;</span><br><span class="line">    *s=<span class="string">&#x27;\0&#x27;</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、浮点数"><a href="#4、浮点数" class="headerlink" title="4、浮点数"></a>4、浮点数</h2><p>因为浮点数精度问题，它的手动读入并不好写，并且出错率或误差率远远大于用<code>scanf</code>或<code>std::cin</code>读入。</p>
<p>这里给出我的一个浮点数读入实现，仅供参考。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">double</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">double</span> d=<span class="number">1</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);c=getc();<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;x=x*<span class="number">10</span>+(c^<span class="number">48</span>);c=getc();&#125;</span><br><span class="line">    <span class="keyword">if</span>(c!=<span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    c=getc();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;d/=<span class="number">10.0</span>;x+=d*(c^<span class="number">48</span>);c=getc();&#125;</span><br><span class="line">    x*=(k?<span class="number">-1.0</span>:<span class="number">1.0</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在读入小数部分时<code>d</code>临时保存当前位。</p>
<h1 id="二、快速输出"><a href="#二、快速输出" class="headerlink" title="二、快速输出"></a>二、快速输出</h1><h2 id="1、带符号整形-1"><a href="#1、带符号整形-1" class="headerlink" title="1、带符号整形"></a>1、带符号整形</h2><p>一般有递归和非递归两种写法。这里采用非递归写法，因为时间效率较高。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">30</span>];<span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;putc(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) putc(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) buf[++p]=x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">    <span class="keyword">for</span>(;p!=<span class="number">-1</span>;p--) putc(buf[p]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>putc</code>为输出单个字符函数，<code>buf</code>为缓存区，一般开到<code>20</code>即可。</p>
<h2 id="2、单个字符-1"><a href="#2、单个字符-1" class="headerlink" title="2、单个字符"></a>2、单个字符</h2><p>没什么说的，就直接输出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;putc(c);&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、字符串-1"><a href="#3、字符串-1" class="headerlink" title="3、字符串"></a>3、字符串</h2><p>因为传参的最佳匹配原因，字符串要分两种重载方式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当传入<code>char *s</code>时，最佳匹配是<code>template&lt;tyename T&gt; write(Type x)</code>，而不是<code>write(const char *s)</code>。更佳的匹配是<code>write(char *s)</code>。所以要写两个重载。</p>
<h2 id="4、浮点数-1"><a href="#4、浮点数-1" class="headerlink" title="4、浮点数"></a>4、浮点数</h2><p>浮点数的快输由于精度以及四舍五入的问题，比快读更加难写并且容易出锅。</p>
<p>这里给出一种鬼畜的实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pre=<span class="number">1</span>,rep;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">50</span>];<span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(rep=<span class="number">1</span>;rep&lt;=pre;rep++) x*=<span class="number">10.0</span>;</span><br><span class="line">    x=(<span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;putc(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) buf[++p]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(rep=<span class="number">1</span>;rep&lt;=pre;rep++,x/=<span class="number">10</span>) buf[++p]=(<span class="keyword">int</span>)x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">        buf[++p]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">int</span>)x==<span class="number">0</span>) buf[++p]=<span class="number">48</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span>(;(<span class="keyword">int</span>)x;x/=<span class="number">10</span>) buf[++p]=(<span class="keyword">int</span>)x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;p!=<span class="number">-1</span>;p--) putc(buf[p]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用时</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">write(round(x*<span class="number">10.0</span>)/<span class="number">10.0</span>);</span><br></pre></td></tr></table></figure>

<p>此处保留$k$位小数就乘除$10^k$</p>
<h1 id="三、块读写优化"><a href="#三、块读写优化" class="headerlink" title="三、块读写优化"></a>三、块读写优化</h1><p>有了上述对具体数据类型的处理优化之后，速度瓶颈变为了输入输出字符的<code>getc()</code>，<code>putc()</code>函数。调用<code>cstdio</code>库中的<code>getchar()</code>和<code>putchar()</code>函数过于慢，解决方法有使用<code>streambuf</code>或<code>fread</code>和<code>fwrite</code>。这里采用的后者。因为其提速原理为整块的输入输出操作，所以称为块读写。</p>
<p>##　１、ｆｒｅａｄ</p>
<p>直接给出<code>getc()</code>函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">21</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>static</code>修饰符保证了缓存数组在函数每次返回后不变，以及外部函数无法访问。</p>
<p>此处三元运算符应用逻辑运算符的短路原理等，简介而精炼。建议仔细品读以理解其意思。</p>
<p>##　２、ｆｗｒｉｔｅ</p>
<p><code>putc()</code>函数为了在适当时期调用稍微繁琐一些。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];<span class="keyword">int</span> p1=<span class="number">-1</span>;<span class="keyword">const</span> <span class="keyword">int</span> p2=(<span class="number">1</span>&lt;&lt;<span class="number">21</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fwrite(buf,<span class="number">1</span>,p1+<span class="number">1</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    p1=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p1==p2) flush();</span><br><span class="line">    buf[++p1]=c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主函数末尾调用<code>flush()</code>以输出。在缓存区满时也会自动调用。</p>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>我写出了快速读写的函数版本和类版本，可以适当时候选用用起来爽的版本。此处附带了库函数的部分替代函数。</p>
<p>函数版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> quick &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tp template<span class="meta-string">&lt;typename Type&gt;</span></span></span><br><span class="line">    <span class="keyword">namespace</span> in &#123;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line">            <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">21</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            *s=getc();</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isspace</span>(*s)) &#123;*s=getc();<span class="keyword">if</span>(*s==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isspace</span>(*s)&amp;&amp;*s!=EOF) &#123;s++;*s=getc();&#125;</span><br><span class="line">            *s=<span class="string">&#x27;\0&#x27;</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;x)</span> </span>&#123;</span><br><span class="line">            x=<span class="number">0</span>;<span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c)) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);c=getc();<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c)) &#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);c=getc();&#125;</span><br><span class="line">            x*=(k?<span class="number">-1</span>:<span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;t,Args &amp;...args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            res+=read(t);res+=read(args...);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> in::read;</span><br><span class="line">    <span class="keyword">namespace</span> out &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];<span class="keyword">int</span> p1=<span class="number">-1</span>;<span class="keyword">const</span> <span class="keyword">int</span> p2=(<span class="number">1</span>&lt;&lt;<span class="number">21</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,p1+<span class="number">1</span>,<span class="built_in">stdout</span>);</span><br><span class="line">            p1=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1==p2) flush();</span><br><span class="line">            buf[++p1]=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">30</span>];<span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;putc(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>) putc(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) buf[++p]=x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">for</span>(;p!=<span class="number">-1</span>;p--) putc(buf[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;putc(c);&#125;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type t,Args ...args)</span> </span>&#123;</span><br><span class="line">            write(t);write(args...);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">using</span> out::write;</span><br><span class="line">    <span class="keyword">using</span> out::flush;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">max</span><span class="params">(<span class="keyword">const</span> Type a,<span class="keyword">const</span> Type b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">min</span><span class="params">(<span class="keyword">const</span> Type a,<span class="keyword">const</span> Type b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Type &amp;a,Type &amp;b)</span> </span>&#123;</span><br><span class="line">        a^=b^=a^=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">abs</span><span class="params">(<span class="keyword">const</span> Type a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;=<span class="number">0</span>?a:-a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> tp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Quick &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tp template<span class="meta-string">&lt;typename Type&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InStream</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1,*p2,failed;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">getc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">1</span>&lt;&lt;<span class="number">21</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            *s=getc();</span><br><span class="line">            <span class="keyword">for</span>(;<span class="built_in">isspace</span>(*s)||*s==EOF;*s=getc()) <span class="keyword">if</span>(*s==EOF) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;!<span class="built_in">isspace</span>(*s)&amp;&amp;*s!=EOF;s++,*s=getc());</span><br><span class="line">            *s=<span class="string">&#x27;\0&#x27;</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(Type &amp;x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">bool</span> k=<span class="literal">false</span>;<span class="keyword">char</span> c=getc();</span><br><span class="line">            <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=getc()) &#123;k|=(c==<span class="string">&#x27;-&#x27;</span>);<span class="keyword">if</span>(c==EOF) <span class="keyword">return</span> <span class="number">0</span>;&#125;x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getc()) x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(c^<span class="number">48</span>);</span><br><span class="line">            x*=(k?<span class="number">-1</span>:<span class="number">1</span>); <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ~failed;</span><br><span class="line">        &#125;</span><br><span class="line">        InStream() &#123;p1=p2=buf;failed=<span class="number">0x00</span>;&#125;</span><br><span class="line">        ~InStream() &#123;&#125;</span><br><span class="line">        tp InStream&amp; <span class="keyword">operator</span> &gt;&gt; (Type &amp;&amp;x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(read(x)) failed=<span class="number">0x00</span>;</span><br><span class="line">            <span class="keyword">else</span> failed=<span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="built_in">cin</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OutStream</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];<span class="keyword">int</span> p1;<span class="keyword">const</span> <span class="keyword">int</span> p2=(<span class="number">1</span>&lt;&lt;<span class="number">21</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            fwrite(buf,<span class="number">1</span>,p1+<span class="number">1</span>,<span class="built_in">stdout</span>);</span><br><span class="line">            p1=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1==p2) flush();</span><br><span class="line">            buf[++p1]=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(*s!=<span class="string">&#x27;\0&#x27;</span>) putc(*s),s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">30</span>];<span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>) &#123;putc(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>) putc(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">for</span>(;x;x/=<span class="number">10</span>) buf[++p]=x%<span class="number">10</span>+<span class="number">48</span>;</span><br><span class="line">            <span class="keyword">for</span>(;p!=<span class="number">-1</span>;p--) putc(buf[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> &amp;c)</span> </span>&#123;putc(c);&#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        OutStream() &#123;p1=<span class="number">-1</span>;&#125;</span><br><span class="line">        ~OutStream() &#123;flush();&#125;</span><br><span class="line">        tp OutStream&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">const</span> Type &amp;x) &#123;</span><br><span class="line">            write(x);<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="built_in">cout</span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> <span class="title">endl</span><span class="params">(<span class="string">&#x27;\n&#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">max</span><span class="params">(<span class="keyword">const</span> Type &amp;a,<span class="keyword">const</span> Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">min</span><span class="params">(<span class="keyword">const</span> Type &amp;a,<span class="keyword">const</span> Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Type &amp;a,Type &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Type tmp;</span><br><span class="line">        tmp=a;a=b;b=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tp <span class="keyword">inline</span> Type <span class="title">abs</span><span class="params">(<span class="keyword">const</span> Type &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;=<span class="number">0</span>?a:-a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> tp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类版本可以使用和<code>std::cin</code>和<code>std::cout</code>相同的方法调用。比如，可以<code>while(Quick::cin&gt;&gt;a)</code>。</p>
<p>注意类版本主函数末尾不需要调用<code>flush()</code>，因为在销毁内存时自动调用了。另外，为了使函数版本也实现这种功能，也可以封装到类里，并不定参重载<code>()</code>运算符。</p>
]]></content>
      <tags>
        <tag>卡常</tag>
      </tags>
  </entry>
</search>
